function [rocket] = BLC_Calc(Engine_Geo,mDot_BLC,mDot,exhaust,coolant_data,T0Cool,rocket)
%BLC: This function calculates the steady-state wall temperature along an
% engine wall contour for a given set of chamber conditions and Boundary
% Layer Cooling (BLC) parameters. Based on empirical data and relationships
% gathered from Air Force Document AEDC-TR-91-1, by William Grissom at
% Arnolds Air Force Base

%% Inputs

% Engine_Geo: nozzleGeometry.m object storing important engine geometry
%   parameters
% mDot_BLC: Mass flow rate of Boundary Layer Coolant
% mDot: Mass flow rate of combustion products
% exhaust: Cantera GRI30 object representing the post-combustion gas
%   mixture
% coolant_data: tank.m object containing injection inofmration about the
%   coolant
% T0Cool: Initial injection temperature of coolant drawn from vapInject.m
% rocket: rocketProperties.m parameter object, used so that the object
%   generated by engine_param_univ can be added on to. If not specified, new
%   object will be made.

%% Outputs

% rocket: rocketProperties.m parameter object with relevant thermal arrays

%% Conversions and Constant
psi2pa = 6894.76; % Conversion from psi to Pascals
in2m = 0.0254; % Conversion from inches to meters
N2lbf = 0.224809; % Conversion from Newtons to pound-force

if nargin < 6
    rocket = rocketProperties();
end

boltzmann = 5.67*10^-8; % Stefan-Boltzmann constant
Aw = 0.5; % Estimate of wall material absorptivity; difficult to predict due to being dependent on wall polish as well as material. Generally can be assumed to be 0.3-0.6.
%% Engine Geometry

Cont_Ratio = Engine_Geo.contRatio;

Dt = Engine_Geo.Dt;
Dc = Engine_Geo.Dc;
r1 = Engine_Geo.rCon;
r2 = Engine_Geo.rExp;
theta1 = Engine_Geo.thetaCon;
theta2 = Engine_Geo.thetaExp;
L1 = Engine_Geo.Lc;

De = Engine_Geo.De;
D2 = Engine_Geo.D2;
D3 = Engine_Geo.D3;
D5 = Engine_Geo.D5;
L2 = Engine_Geo.L2;
L3 = Engine_Geo.L3;
Lt = Engine_Geo.Lt;
L5 = Engine_Geo.L5;
L_total = Engine_Geo.L_total;

%
At = Dt^2/4*pi;
Ach = Cont_Ratio*At;

%% Exhaust Properties
% Stores chamber temperature and pressure
pc = pressure(exhaust);
Tc = temperature(exhaust);

% Average velocity of combustion products in chamber
Gch = mDot/Ach;

%% Coolant Properties

T_cool = T0Cool;
coolant = coolant_data.prop;

CoolFlowTotal = mDot_BLC/(pi*Dc);

%Determine vapor quality of the coolant to get initial liquid/vapor fractions
try
    rho_inj = CoolProp('D', 'T', T_cool, 'P', pc, coolant);
    h_inj   = CoolProp('H', 'T', T_coo, 'P', pc, coolant);
    Q_inj   = CoolProp('Q', 'H', h_inj, 'D', rho_inj, coolant); %Get vapor quality from enthalpy and density
catch %Add a try-catch with a slightly adjusted chamber pressure. CoolProp gets finnicky near vapor pressures sometimes
    rho_inj = CoolProp('D', 'T', T_cool, 'P', pc*1.05, coolant);
    h_inj   = CoolProp('H', 'T', T_cool, 'P', pc*1.05, coolant);
    Q_inj   = CoolProp('Q', 'H', h_inj, 'D', rho_inj, coolant);
end
%Correct for weird coolprop vapor outputs
if Q_inj < 0
    Q_inj = 0;
elseif Q_inj > 1
    Q_inj = 1;
end

%Define liquid mass flow rate from definition of vapor quality
MC_liq = CoolFlowTotal*(1-Q_inj);

% Sets
MC_c = CoolFlowTotal;
MC_bl = CoolFlowTotal;

% Molecular weight of coolant
M_c = CoolProp('M','P',101325,'T',300,coolant);

%% Iteration Parameters
Taw = T_cool;
x = 0;
n = 200;
dL = L_total/n;
L = 0;
D = Dc;

et=0.2; % Estimation of turbulence correction factor

for i = 1:n
    % Finds the properties of the freestream gas
    free_mu = viscosity(exhaust); % Dynamic Viscosity
    free_c_p = cp_mass(exhaust); % Specific Heat at Constant Pressure
    free_thermal_cond = thermalConductivity(exhaust); % Thermal Conductivity
    free_prandtl = free_c_p*free_mu/free_thermal_cond; % Prandtl Number
    gamma = cp_mass(exhaust)/cv_mass(exhaust); % Ratio of Specific Heats
    
    % Saves old chamber length value to later determine temperature at
    % engine throat
    L_old = L;
    
    L = dL*i; % Current length
    L_array(i) = L; % Array of length values for plotting
    D_old = D; % Saves previous diameter for finding change
    % Finds current diameter value using current L value
    if L < L1
        D = Dc;
    elseif L < L2
        D = Dc - 2*(r1-sqrt(r1^2 - (L-L1)^2));
    elseif L < L3
        D = D2 - 2*(L-L2)*tand(theta1);
    elseif L < L5
        D = Dt + 2*(r2-sqrt(r2^2 - (L-L5)^2));  
    else
        D = D5 + 2*(L-L5)*tand(theta2);
    end
    
    dD = D-D_old; % Change in diameter
    dx = sqrt(dL^2+(dD/2)^2); % Finds change in contour length
    x = x+dx; % Current total length along contour
    A = (pi/4)*D^2; % Current flow area
    
    % Finds the local combustion mass flow rate per unit area
    G_local = Gch*(Ach/A);
    
    A_ratio = A/At; % Ratio of current flow area to throat area
    gamma_r = (gamma+1)/(gamma-1); % Important gamma ratio for mach calculations
    % Solves an implicit function for mach number using a numerical
    % zero-finding function
    M = @(m) ((1+(gamma-1)/2*m.^2)/((gamma+1)/2))^(gamma_r/2) - m*A_ratio;
    if L>Lt % Finds mach number at supersonic conditions
        mach = bisect_method(M,1,1000,1E-7);
    elseif L<Lt % Finds mach number at subsonic conditions
        mach = bisect_method(M,0,1,1E-7);
    else % Mach number at throat just in case
        mach = 1;
    end
    % Creates array of mach numbers for plotting
    mach_array(i) = mach;
    
    
    r = free_prandtl^(1/3); % Uses assumption to find freestream boundary temp recovery factor. Prolly right-ish
    Ts = Tc/(1+0.5*(gamma-1)*mach^2); % Finds static temperature using compressible equations
    ps = pc/((1+0.5*mach^2*(gamma-1))^(gamma/(gamma-1))); % Finds static pressure using compressible equations
    Tr = Tc - (1-r)*(Tc - Ts); % Finds recovery temperature (temp at freestream boundary)
    % Saves recovery temperature and static pressure to arrays for plotting
    Tr_array(i) = Tr;
    p_array(i) = ps;
    
    % Calculates local combustion gas velocity using isentropic Mach number
    % and speed of sound equation
    Ug = mach * sqrt(Ts*gamma*(gasconstant()/meanMolecularWeight(exhaust))); 
    
    % Finds local chemical equillibrium of combustion gases for slightly
    % better fidelity
    set(exhaust,'T',Tr,'P',ps);
    equilibrate(exhaust,'HP');
    
    % Finds molecular weight of combustion gasses
    M_g = meanMolecularWeight(exhaust)/1000;
    % Finds specific heat at constant presure
    try
        Cp_c = CoolProp('C','T',T_cool,'P',ps,coolant);
    catch
        Cp_c = CoolProp('C', 'T', T_cool, 'P', ps*1.05, coolant);
    end
    % Uses a function to calculate combustion gas thermal emmittance based
    % on the population of H2O and CO2 molecules
    free_emissivity = emittance(exhaust,Aw,D);
    
    % Begins actual thermal calculations
    if MC_liq > 0 % Evaluates if a liquid boundary layer is left
        % Calculates turbulence factor and effective downstream length
        Kt = 1+4*et;
        xe = 3.53*D*(1+(x/(3.53*D))^-1.2)^(1/1.2);

        LHV_cool = CoolProp('H','P',ps,'Q',1,coolant)-CoolProp('H','P',ps,'Q',0,coolant); % Laten Heat of Vaporization of coolant
        Tv = CoolProp('T','P',pc,'Q',0.5,coolant); % Saturation temperature of coolant
        Tm = 0.5*(Tv+Tr); % Average between saturation temperature of coolant and boundary temperature of combustion gasses
        
        D_cool = CoolProp('D','P',ps,'T',T_cool,coolant); % Coolant density
        mu_cool = CoolProp('V','T',T_cool,'P',ps,coolant); % Coolant dynamic viscosity 

        % Calulates the surface liquid coolant velocity implicitly using
        % Couette flow relations
        Ul_func = @(Ul) sqrt((0.0592*MC_liq*(Gch*Tr/(Tm*Ug))^0.8*(Ug-Ul)^1.8)/(mu_cool*D_cool))-Ul;
        Ul = bisect_method(Ul_func,0,Ug,1E-5);
        
        G = Gch*(Tr/Tm)*((Ug-Ul)/Ug); % Effective combustion gas mass flow rate between gas and liquid layers
        Re = G*xe/free_mu; % Reynolds number of combustion gasses
        Cf = 0.0592*Re^-0.2; % Coefficient of friction at gas boundary layer, for surface shear stress
        ST = 0.5*Cf*free_prandtl^-0.6; % Stanton number
        
        % Calculates transpration-free heat transfer coefficient between
        % gas and liquid layer
        h0 = Kt*G*free_c_p*ST;
        
        % Calculates radiative heat transfer to liquid boundary layer
        Q_rad = Aw*boltzmann*free_emissivity*(Ts^4-Tv^4);
        
        if T_cool < Tv % Calculates raise in temperature of boundary layer if below stauration temperature
            h = h0; % Uses transpiration-free heat transfer coefficient
            Q_conv = h*(Tr-T_cool); % Convective heat transfer
            dT_l = (Q_conv+Q_rad)/(MC_liq*Cp_c)*dx; % Stepwise difference in boundary temperature
            T_cool = T_cool+dT_l; % New temperature of boundary layer
        else % If boundary layer is at saturation temperature, calculates heat transfer based on transpiration
            % Applies correctioon factor based on ratio of molecular
            % weights of coolant and combustion gasses
            if M_c > M_g
                a = 0.6;
            else
                a = 0.35;
            end
            Km = (M_g/M_c)^a;
            
            % Calculates transpiration heat transfer coefficient implicitly
            % using correction factor H
            H_func = @(h) Km*(free_c_p/(LHV_cool))*((Tr-T_cool)+Q_rad/h);
            h_func = @(h) h0*(log(1+H_func(h))/H_func(h))-h;
            h = bisect_method(h_func,0.001,1E7,1E-7);
            
            Q_conv = h*(Tr-T_cool); % Convective heat transfer into 
            m_vap = (Q_conv+Q_rad)/LHV_cool; % Mass evaporation rate, kg/s
            dm_l = -m_vap*dx; % Difference in coolant mass flow per circumference based on evaporation
            MC_liq = MC_liq + dm_l; % New coolant mass flow per circumference
            
            if MC_liq <= 0 % Finds initial entrained boundary layer gas
                K = G_local * free_mu^0.25 * MC_c^-1.25; % Gaseous correction factor
                Xi = K*x; % Effective initial X value
                MC_bl = MC_c * (1+0.325*Xi^0.8); % Initial entrained gas flow per circumference
            end
        end
        Taw = T_cool; %
        
    else
        Kt = 1+10.2*et; % Turbulence correctioon factor
        G = Gch*A_ratio; % Local combustion flow per unit area
        Km = (M_c/M_g)^0.14; % Molecular weight correction factor between coolant and combustion gas
        
        % Finds change in entrained free stream gas
        dMC_fse_1 = 0.1963*Kt*G*(free_mu/MC_bl)^0.25*dx;
        dMC_fse_2 = 0.1963*Kt*G*(free_mu/(MC_bl+dMC_fse_1))^0.25*dx;
        dMC_fse = 0.5*(dMC_fse_1+dMC_fse_2);
        % Finds change in coolant flow per circumference
        dMC_bl_cont = -MC_bl * (1/D) * dD;
        MC_bl = MC_bl + dMC_fse + dMC_bl_cont;
        MC_c = MC_c+dMC_bl_cont;
        % Calculates change is coolant gas temperature due to entrainment
        % of free stream gasas
        dTaw_gas = dMC_fse * (Tr - Taw) * (MC_bl + MC_c * ((1/Km)*(Cp_c/free_c_p)-1))^-1;
        % Calculates change in coolant gas temperature due to thermal
        % radiation of combustion gasses
        Q_rad = Aw*free_emissivity*boltzmann*(Ts^4-Taw^4);
        dTaw_gas_rad = Q_rad/(Cp_c*MC_bl)*dx;
        % Adds together changes in temperature from free stream entrainment
        % and thermal radiation to previous temeprature to find current
        % wall temperature
        Taw = Taw+dTaw_gas+dTaw_gas_rad;
    end
    Taw = real(Taw);
    
Taw_array(i) = Taw; % Adds current coolant temperature (and thus, under steady-state, wall temperature) to array for graphing


% Checks if current length is roughly at the throat, then records current
% temperature as the throat temperature if it is
if L_old <= Lt && L >= Lt
    Temp_Throat = Taw;
end

%% Bartz Correlation
%Get mean temperature of thermal boundary layer
T_mean = (Taw + Tr)/2;
%Get density at point from coolprop
rho_cool = CoolProp('D', 'T', Taw, 'P', ps, coolant);
u_cool = mach*sqrt(gamma*8.31/M_c*Taw);

%Finally, get the Prandtl number, thermal conductivity, and viscosity of coolant
Pr_cool = CoolProp('Prandtl', 'T', Taw, 'P', ps, coolant);
k_cool  = CoolProp('L', 'T', Taw, 'P', ps, coolant);
mu_cool = CoolProp('V', 'T', Taw, 'P', ps, coolant);

%Apply Bartz correlation
h_array(i) = 0.023*(rho_cool*u_cool)^0.8*(D^-0.2)*k_cool*Pr_cool^0.4/(mu_cool^0.8);


end

% Adds relevant arrays to rocketProperties object
rocket.L_array = L_array;
rocket.Tw_array = Taw_array;
rocket.Mach_array = mach_array;
rocket.p_array = p_array;
rocket.Tr_array = Tr_array;
rocket.h_array = h_array;

rocket.Tmax = max(Taw_array);
rocket.Tthroat = Temp_Throat;

end

